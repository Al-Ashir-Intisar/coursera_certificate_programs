# -*- coding: utf-8 -*-
"""temperature vs height data pre-processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uYXYCK6w1Fqylgxdf5jfr_VPDRs08kmI
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

height_ds = pd.read_csv('/content/drive/MyDrive/Data Projects/Height vs Weather/average-height-by-country-2024.csv')

height_ds.head(5)

temperature_ds = pd.read_csv('/content/drive/MyDrive/Data Projects/Height vs Weather/average-monthly-surface-temperature.csv')

temperature_ds.head(5)

metadata_ds = pd.read_json('/content/drive/MyDrive/Data Projects/Height vs Weather/average-monthly-surface-temperature.metadata.json')

metadata_ds.head(20)

temperature_ds.dtypes

temperature_2023_ds = temperature_ds[temperature_ds['year'] == 2023]

temperature_2023_ds.head(5)

temp_year_avg_2023 = temperature_2023_ds.groupby('Entity')['Average surface temperature'].mean()

temp_year_avg_2023.head(10)

temp_year_avg_2023 = temp_year_avg_2023.to_frame()

temp23_vs_height24_ds = height_ds.merge(temp_year_avg_2023, left_on = 'country', right_on = 'Entity', how = 'right')

temp23_vs_height24_ds.head(10)

import matplotlib.pyplot as plt

plt.scatter(temp23_vs_height24_ds['Average surface temperature'], temp23_vs_height24_ds['AvgHgtBoysAge19'])
plt.xlabel('Average surface temperature 2023')
plt.ylabel('Average height of a 19 yearl old boy in 2024')
plt.title('Average Male height vs Average Temperature of countries of the world')
plt.show()

temp23_vs_height24_ds['normalized_temp'] = (temp23_vs_height24_ds['Average surface temperature'] - 14).abs()

plt.scatter(temp23_vs_height24_ds['normalized_temp'], temp23_vs_height24_ds['AvgHgtBoysAge19'])
plt.xlabel('Average surface temperature normalized at (14C) 2023')
plt.ylabel('Average height of a 19 yearl old boy in 2024')
plt.title('Average Male height vs Average Temperature of countries of the world')
plt.show()

plt.scatter(temp23_vs_height24_ds['normalized_temp'], temp23_vs_height24_ds['AvgHgtGirlsAge19'])
plt.xlabel('Average surface temperature normalized at (14C) 2023')
plt.ylabel('Average height of a 19 yearl old girl in 2024')
plt.title('Average Female height vs Average Temperature of countries of the world')
plt.show()

from sklearn.linear_model import LinearRegression
import statsmodels.api as sm

model_ds = temp23_vs_height24_ds.dropna()

X_male = model_ds['Average surface temperature']
Y = model_ds['AvgHgtBoysAge19']

X_male_const = sm.add_constant(X_male)

model_male = sm.OLS(Y, X_male_const).fit()

print(model_male.summary())

X = model_ds['normalized_temp']
Y = model_ds['AvgHgtGirlsAge19']

X = sm.add_constant(X)

model_female = sm.OLS(Y, X).fit()

print(model_female.summary())

r_squared = model_male.rsquared
p_value = model_male.pvalues['Average surface temperature']
print(r_squared, p_value)

import pycountry_convert as pc
from matplotlib.lines import Line2D

def country_to_continent(country_name):
    try:
        # Get alpha-2 country code
        country_code = pc.country_name_to_country_alpha2(country_name, cn_name_format="default")
        # Convert to continent name
        continent_code = pc.country_alpha2_to_continent_code(country_code)
        continent_name = pc.convert_continent_code_to_continent_name(continent_code)
        return continent_name
    except:
        return 'Unknown'

# Example
print(country_to_continent('India'))  # Output: Asia
print(country_to_continent('Germany'))  # Output: Europe

temp23_vs_height24_ds['continent'] = temp23_vs_height24_ds['country'].apply(country_to_continent)
temp23_vs_height24_ds.head(5)

# Define a color mapping for each continent
continent_colors = {
    'Asia': 'red',
    'Europe': 'blue',
    'Africa': 'green',
    'North America': 'orange',
    'South America': 'purple',
    'Oceania': 'cyan',
    'Unknown': 'gray'
}

# Map continent column to colors
colors = temp23_vs_height24_ds['continent'].map(continent_colors)

plt.scatter(temp23_vs_height24_ds['Average surface temperature'], temp23_vs_height24_ds['AvgHgtBoysAge19'], c=colors)
legend_elements = [Line2D([0], [0], marker='o', color='w', markerfacecolor=col, markersize=10, label=cont)
                   for cont, col in continent_colors.items()]
plt.legend(handles=legend_elements, title="Continents", loc="lower left")
plt.plot(X_male, model_male.predict(X_male_const), color='red', label='Fitted Line')
plt.text(0.95, 0.95,
         f'R-squared: {r_squared:.3f}\nP-value: {p_value:.3e}',
         fontsize=10, color='blue',
         bbox=dict(facecolor='white', alpha=0.5),
         ha='right', va='top', transform=plt.gca().transAxes)
plt.xlabel('Average absolute surface temperature normalized at (14C) 2023')
plt.ylabel('Average height of a 19 yearl old boy in 2024')
plt.title('Average Male height vs Average Temperature of countries of the world')
plt.show()

temp23_vs_height24_ds.to_csv('/content/drive/MyDrive/Data Projects/Height vs Weather/Average_Temperature2023_vs_Average_Height2024.csv')